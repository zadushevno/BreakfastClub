#зачем писать global если переменная у нас до кода, она не будет автоматом уже глобальная?
    #нет, переменная вне функции и переменная внутри функции с одинаковыми именами -- не одно и то же, комп хранит инфу про них в разных ячейках памяти как бы
# что такое бот месседж хэндлер
# надо решить насчет холодильник и хочу завтрак -- это команды или просто слова?
    #можно и в команду переделать, но я пыталась сделать так, чтобы бот реагировал на все сообщения со словами "рецепт" и "завтрак", но в какой-то момент он стал реагировать на все :(

#!!!! надо сделать так, чтобы перед добавлением продуктов пользователь видел, что у него есть. если ничего -- сообщ типа "В твоем холодильнике пока ничего нет. Доавить продукт?"
import telebot
import json
from telebot import types

bot = telebot.TeleBot("1747737968:AAHQm4cfnw54SK2a6M6sUWU7G0ZyzgrJlWA")

user_fridge = {}
product = ""
amount = ""

@bot.message_handler(commands=["start"])
def hello(message):
    if message.text == "/start":
        bot.send_message (message.from_user.id, 'Привет! Этот бот сделает твое утро волшебным и замечательным! Выбери команду /h, чтобы сказать, что есть в твоем холодильнике. Напиши "хочу завтрак", чтобы я мог предложить тебе рецепты :)')

@bot.message_handler(commands=["h"])    
def u_fridge(message):
    if message.text == "/h":
        bot.send_message (message.from_user.id, "Давай откроем холодильник и посмотрим, что там есть..)")
        bot.send_message (message.from_user.id, "Введите название продукта")
        bot.register_next_step_handler(message, u_product)

def u_product(message):
    global product
    product = message.text
    bot.send_message (message.from_user.id,"Введите количество продукта")
    bot.register_next_step_handler(message, u_amount)

def u_amount(message):
    global amount
    amount = message.text            
    
    keyboard = types.InlineKeyboardMarkup()
    key_yes = types.InlineKeyboardButton(text='Да', callback_data='yes')
    keyboard.add(key_yes)
    key_no = types.InlineKeyboardButton(text='Нет', callback_data='no')
    keyboard.add(key_no)
    question = "Хочешь добавить еще?"
    bot.send_message(message.from_user.id, text = question, reply_markup=keyboard)

    user_fridge[product] = amount
    
    user_id = message.from_user.id
    user_file = str(user_id) + ".txt"
    with open (user_file, "w", encoding = "utf-8") as f:
        f.write(str(user_fridge))

@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "no":
        bot.send_message(call.message.chat.id, "Окей")
    elif call.data == "yes":
        bot.send_message (call.from_user.id, "Введите название продукта")
        bot.register_next_step_handler(call.message, u_product)
    else:
        f = open('recipes.json', 'r', encoding='utf-8')
        data = json.load(f)
        ingredients = ""
        description = ""
        for key, value in data[call.data][0].items():
            ingredients = ingredients + key + ' ' + value + '\n'
        description = data[call.data][1]
        recipes_text = '*Ингредиенты:*\n' + ingredients + '\n' + '*Способ приготовления:* \n' + description
        bot.send_message(call.message.chat.id, recipes_text, parse_mode="Markdown")
        f.close()

@bot.message_handler(content_types=['text'])
def send_recipes(message):
    if message.text == 'хочу завтрак':
        list_of_recipes = types.InlineKeyboardMarkup()
        f = open('recipes.json', 'r', encoding='utf-8')
        data = json.load(f)
        for key in data:
            callback_button = types.InlineKeyboardButton(text=key, callback_data=key)
            list_of_recipes.add(callback_button)
        f.close()
        bot.send_message(message.chat.id, "Вот список доступных завтраков:", reply_markup=list_of_recipes)
#@bot.callback_query_handler(func=lambda call: True)
#def callback_worker(call):

bot.polling()
